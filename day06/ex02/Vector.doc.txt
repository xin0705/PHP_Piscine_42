
<- Vector ----------------------------------------------------------------------
The Vector class handles representations of directions, a.k.a. vectors.

An instance can be constructed from an array with an instance of
"destination" vertex and an instance of "origin" vertex (see Vertex class):

$vector = new Vector( array( 'dest' => $vrtxZ, 'orig' => $vrtxO ) );

The 'origin' vertex is optional, the default origin is a new instance of
the "x=0, y=0, z=0, w=1" vertex.

The Vector class has four attributes:

'x' magnitude,
'y' magnitude,
'z' magnitude
and 'w' coordinate (default for 'w' = 0.0).

For handling the printing of the construct and destruct output, there is a
static boolean attribute 'verbose'. Usage:
Vector::$verbose = False;	(default, provides no output)
Vector::$verbose = True;	(provides output)

The class provides the following methods :

float magnitude();
Returns the vector’s length (or ”norm”) as a float.

Vector normalize();
Returns a normalized version of the vector.
If the vector is already normalized, returns a fresh copy of the vector.

Vector add( Vector $rhs );
Returns the sum vector of both vectors.

Vector sub( Vector $rhs );
Returns the difference vector of both vectors.

Vector opposite();
Returns the opposite vector.

Vector scalarProduct( $k );
Returns the multiplication of the vector with a scalar.

float dotProduct( Vector $rhs );
Returns the scalar multiplication of both vectors.

float cos( Vector $rhs );
Returns the angle’s Appendix cosine between both vectors.

Vector crossProduct( Vector $rhs );
Returns the cross multiplication of both vectors, using right-hand mark.

Vector   getX();
Vector   getY();
Vector   getZ();
Vector   getW();
For returning the values of the corresponding attributes.

Vector   doc();
For retrieving the contents of this doc file in a string.
---------------------------------------------------------------------- Vector ->
